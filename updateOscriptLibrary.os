#Использовать json
#Использовать fs
#Использовать gitrunner
#Использовать logos
#Использовать messenger
#Использовать opm

Перем Лог;
Перем ПарсерJSON;
Перем СИ;
Перем ЭтоВин;

Перем _Заголовки;
Перем _Соединение;

Перем КаталогСобранныхПакетов;
Перем КаталогИсходников;
Перем КаталогПубликации;
Перем ТолькоЛокальнаяСборка;
Перем Мессенджер;
Перем МассивСообщенийГиттер;

Процедура ВывестиЛинию()
	Лог.Информация("===========================");
КонецПроцедуры

// Копипаст из opm + подставлен РабочийКаталог
//
Функция ПрочитатьОписаниеПакета(Знач РабочийКаталог) Экспорт
	
	ОписаниеПакета = Новый ОписаниеПакета();
	
	ПутьКМанифесту = ОбъединитьПути(РабочийКаталог, "packagedef");
	
	Файл_Манифест = Новый Файл(ПутьКМанифесту);
	Если Файл_Манифест.Существует() Тогда
		Контекст = Новый Структура("Описание", ОписаниеПакета);
		ЗагрузитьСценарий(ПутьКМанифесту, Контекст);
	КонецЕсли;		
	
	Возврат ОписаниеПакета;
	
КонецФункции

Процедура СформироватьList(КаталогПубликации)

	ПутьКСпискуПакетов = ОбъединитьПути(КаталогПубликации, "list.txt");
	
	НайденныеФайлы = НайтиФайлы(КаталогПубликации, ПолучитьМаскуВсеФайлы(), Ложь);
	
	ЗаписьТекста = Новый ЗаписьТекста(ПутьКСпискуПакетов, КодировкаТекста.UTF8NoBom);
	
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл	
		Если НайденныйФайл.ЭтоФайл() Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьТекста.ЗаписатьСтроку(НайденныйФайл.Имя);	
	КонецЦикла;
	
	ЗаписьТекста.Закрыть();

КонецПроцедуры	

Функция ПолучитьЗаголовкиЗапросаGithub()
	
	Если _Заголовки = Неопределено Тогда

		_Заголовки = Новый Соответствие();
		_Заголовки.Вставить("Accept", "application/vnd.github.v3+json");
		_Заголовки.Вставить("User-Agent", "oscript-library-autobuilder");

		ТокенАвторизации = СИ.ПолучитьПеременнуюСреды("GITHUB_OAUTH_TOKEN");
		Если ЗначениеЗаполнено(ТокенАвторизации) Тогда
			_Заголовки.Вставить("Authorization", СтрШаблон("token %1", ТокенАвторизации));
		КонецЕсли;

	КонецЕсли;

	Возврат _Заголовки;

КонецФункции

Функция ПолучитьСоединениеGithub()
	Если _Соединение = Неопределено Тогда
		Сервер = "https://api.github.com";
		_Соединение = Новый HTTPСоединение(Сервер);
	КонецЕсли;

	Возврат _Соединение;
КонецФункции

Функция ПолучитьМассивРепозиториев(ТипПоиска)

	Соединение = ПолучитьСоединениеGithub();

	Ресурс = СтрШаблон("/orgs/oscript-library/repos?type=%1", ТипПоиска);
	Заголовки = ПолучитьЗаголовкиЗапросаGithub();

	Лог.Информация("Запрашиваю список репозиториев по типу поиска %1", ТипПоиска);

	Запрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	Ответ  = Соединение.Получить(Запрос);

	Если Ответ.КодСостояния <> 200 Тогда
		Сообщить(Ответ.ПолучитьТелоКакСтроку());
		ВызватьИсключение Ответ.КодСостояния;
	КонецЕсли;

	ДанныеОтвета = ПарсерJSON.ПрочитатьJSON(Ответ.ПолучитьТелоКакСтроку());

	Возврат ДанныеОтвета;

КонецФункции

// Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник - Массив - массив, в который необходимо добавить значения.
//  МассивИсточник - Массив - массив значений для заполнения.
//
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник) Экспорт
	Для Каждого Значение Из МассивИсточник Цикл
		МассивПриемник.Добавить(Значение);
	КонецЦикла;
КонецПроцедуры

Функция НайтиВИндексированнойКоллекции(Знач Коллекция, Знач Значение)

	Для Инд = 0 По Коллекция.Количество() - 1 Цикл

		Если Коллекция[Инд] = Значение Тогда
			Возврат Инд;
		КонецЕсли;

	КонецЦикла;

	Возврат Неопределено;

КонецФункции

Процедура ОбработатьРепозиторий(Знач Репозиторий, Знач КэшБиблиотек, Знач ИмяВетки = "master")

	ЭтоРелиз = ИмяВетки = "master";

	ИмяРепозитория = Репозиторий.Получить("name");

	Лог.Информация("Обрабатываю " + ИмяРепозитория + " (" + ИмяВетки + ")");
	Если ЭтоРелиз Тогда
		КаталогПакета = ОбъединитьПути(КаталогСобранныхПакетов, ИмяРепозитория);
	Иначе
		КаталогПакета = ОбъединитьПути(КаталогСобранныхПакетов, "_" + ИмяВетки, ИмяРепозитория);
	КонецЕсли;

	ФС.ОбеспечитьПустойКаталог(КаталогПакета);
	
	ПутьКРепозиторию = Репозиторий.Получить("ssh_url");
	ЭтоФорк = Репозиторий.Получить("fork");
	КаталогРепозитория = ОбъединитьПути(КаталогИсходников, ИмяРепозитория);
	
	Если НЕ ФС.КаталогСуществует(КаталогРепозитория) Тогда
		ГитМенеджер = Новый ГитРепозиторий();
		ГитМенеджер.УстановитьРабочийКаталог(КаталогИсходников);
		ГитМенеджер.КлонироватьРепозиторий(ПутьКРепозиторию);
		Лог.Информация("Репозиторий успешно склонирован: " + ИмяРепозитория);
	КонецЕсли;
	
	ГитРепозиторий = Новый ГитРепозиторий();
	ГитРепозиторий.УстановитьРабочийКаталог(КаталогРепозитория);
	
	СписокВеток = ГитРепозиторий.ПолучитьСписокВеток();
	
	Если СписокВеток.Найти(ИмяВетки, "Имя") = Неопределено Тогда
		ГитРепозиторий.ПерейтиВВетку(ИмяВетки, Истина);
	Иначе

		ГитРепозиторий.ПерейтиВВетку(ИмяВетки, Ложь);
		ГитРепозиторий.Получить();

	КонецЕсли;

	
	Если ЭтоФорк Тогда
		Лог.Информация("Это форк. Получаю информацию о родителе");
		
		Соединение = ПолучитьСоединениеGithub();
		РесурсРепозиторий = "/repos/oscript-library/" + ИмяРепозитория;
		ЗапросРепозиторий = Новый HTTPЗапрос(РесурсРепозиторий, ПолучитьЗаголовкиЗапросаGithub());
		
		ОтветРепозиторий  = Соединение.Получить(ЗапросРепозиторий);
		ТелоОтвета = ОтветРепозиторий.ПолучитьТелоКакСтроку();
		ДанныеОтветаРепозиторий = ПарсерJSON.ПрочитатьJSON(ТелоОтвета);
		ПутьКРепозиториюРодителю = ДанныеОтветаРепозиторий.Получить("parent").Получить("ssh_url");
		
		ВнешниеРепозитории = ГитРепозиторий.ПолучитьСписокВнешнихРепозиториев();
		ВнешнийРепозиторийУжеДобавлен = Ложь;
		Для Каждого ВнешнийРепозиторий Из ВнешниеРепозитории Цикл
			Если ВнешнийРепозиторий.Адрес = ПутьКРепозиториюРодителю Тогда
				ВнешнийРепозиторийУжеДобавлен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ВнешнийРепозиторийУжеДобавлен Тогда
			ГитРепозиторий.ДобавитьВнешнийРепозиторий("origin1", ПутьКРепозиториюРодителю);
		КонецЕсли;

		ГитРепозиторий.ПолучитьБезОбновления("origin1");
		
		СписокВеток = ГитРепозиторий.ПолучитьСписокВеток(Истина);
		Если СписокВеток.Найти("remotes/origin1/" + ИмяВетки, "Имя") = Неопределено Тогда

			ТекстСообщения = СтрШаблон("Не удалось получить данные ветки %1. Возможно она отсутствует", ИмяВетки);
			Если ЭтоРелиз Тогда
				Лог.Ошибка(ТекстСообщения);
			Иначе
				Лог.Информация(ТекстСообщения);
			КонецЕсли;

			Возврат;

		КонецЕсли;

		ГитРепозиторий.Получить("origin1", ИмяВетки);

		Лог.Информация("Информация о родителе получена");

	КонецЕсли;

	ГитРепозиторий.ОбновитьПодмодули(Истина, Истина);
	
	Если Не ТолькоЛокальнаяСборка Тогда
		ГитРепозиторий.Отправить();
	КонецЕсли;
	
	Попытка
		ОписаниеПакета = ПрочитатьОписаниеПакета(КаталогРепозитория);
		СвойстваПакета = ОписаниеПакета.Свойства();
	Исключение
		Лог.Ошибка("Некорректный манифест в репозитории <%1>", ИмяРепозитория);
		Лог.Ошибка(ОписаниеОшибки());
		УдалитьФайлы(КаталогПакета);
		Возврат;
	КонецПопытки;

	ИДБиблиотеки = СвойстваПакета.Имя;
	ВерсияБиблиотеки = СвойстваПакета.Версия;
	
	ДанныеБиблиотеки = КэшБиблиотек.Получить(ИДБиблиотеки);
	Если ДанныеБиблиотеки = Неопределено Тогда
		ДанныеБиблиотеки = Новый Соответствие;
	КонецЕсли;

	МассивОтозованныхВерсий = ДанныеБиблиотеки.Получить("bannedVersions");
	Если МассивОтозованныхВерсий = Неопределено Тогда
		МассивОтозованныхВерсий = Новый Массив;
	КонецЕсли;
	Если МассивОтозованныхВерсий.Найти(ВерсияБиблиотеки) <> Неопределено Тогда
		Лог.Информация("Версия %1 пакета %2 находится в списке отозванных", ВерсияБиблиотеки, ИДБиблиотеки);
		Лог.Информация("Пропускаю сборку");
		УдалитьФайлы(КаталогПакета);
		Возврат;
	КонецЕсли;

	ПоследняяВерсия = ДанныеБиблиотеки.Получить("lastVersion");
	Если ПоследняяВерсия = ВерсияБиблиотеки Тогда
		Лог.Информация("Версия пакета %1 совпадает с версией в БД.", ИДБиблиотеки);
		Лог.Информация("Пропускаю сборку");
		УдалитьФайлы(КаталогПакета);
		Возврат;
	КонецЕсли;
	МассивВерсий = ДанныеБиблиотеки.Получить("versions");
	Если МассивВерсий = Неопределено Тогда
		МассивВерсий = Новый Массив;
	КонецЕсли;
	Если МассивВерсий.Найти(ВерсияБиблиотеки) = Неопределено Тогда
		МассивВерсий.Добавить(ВерсияБиблиотеки);
	КонецЕсли; 

	ДанныеБиблиотеки.Вставить("id", ИДБиблиотеки);	
	ДанныеБиблиотеки.Вставить("lastVersion", ВерсияБиблиотеки);
	ДанныеБиблиотеки.Вставить("versions", МассивВерсий);
	ДанныеБиблиотеки.Вставить("bannedVersions", МассивОтозованныхВерсий);

	Если ЭтоВин Тогда
		СтрокаКоманды = СтрШаблон("cmd /C opm build %1", КаталогРепозитория);
	Иначе
		СтрокаКоманды = СтрШаблон("bash -c ""opm build %1""", КаталогРепозитория);
	КонецЕсли;
	КодВозврата = 0;
	Лог.Информация("Запускаю сборку");
	ЗапуститьПриложение(СтрокаКоманды, КаталогПакета, Истина, КодВозврата);
	
	ПакетУспешноСобран = КодВозврата = 0;
	Если ПакетУспешноСобран Тогда
		Лог.Информация("Пакет <%1> успешно собран", ИмяРепозитория);    
		КэшБиблиотек.Вставить(ИДБиблиотеки, ДанныеБиблиотеки);
	Иначе
		Лог.Ошибка("Ошибка сборки пакета <%1>", ИмяРепозитория); 
	КонецЕсли;
	
	НайденныеФайлы = НайтиФайлы(КаталогПакета, ПолучитьМаскуВсеФайлы());
	Если НайденныеФайлы.Количество() = 0 Тогда
		УдалитьФайлы(КаталогПакета);
		Возврат;
	КонецЕсли;
	
	ИмяПакетаМассив = СтрРазделить(НайденныеФайлы[0].Имя, "-");
	ИмяПакета = "";
	Для сч = 0 По ИмяПакетаМассив.ВГраница() - 1 Цикл
		ИмяПакета = ИмяПакета + ИмяПакетаМассив[сч] + "-";
	КонецЦикла;
	ИмяПакета = Лев(ИмяПакета, СтрДлина(ИмяПакета) - 1);

	КопироватьФайл(НайденныеФайлы[0].ПолноеИмя, ОбъединитьПути(КаталогПакета, ИмяПакета) + ".ospx");
	
	Если ИмяПакета <> ИмяРепозитория Тогда
		ФС.КопироватьСодержимоеКаталога(КаталогПакета, ОбъединитьПути(КаталогСобранныхПакетов, ИмяПакета));
		УдалитьФайлы(КаталогПакета);
	КонецЕсли;

	Если ПакетУспешноСобран И ЗначениеЗаполнено(Мессенджер) И ЭтоРелиз Тогда
		Сообщение = СтрШаблон(
			"## %1 [%2]%3Репозиторий: %4%5%6",
			ИмяПакета,
			ВерсияБиблиотеки,
			Символы.ПС,
			Репозиторий.Получить("clone_url"),
			Символы.ПС,
			"`// AutoBuilder`"
		);
		МассивСообщенийГиттер.Добавить(Сообщение);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьКэшДля(Знач ИмяВетки)

	Перем КэшБиблиотек, ПутьККэшуБиблиотек;

	Если ИмяВетки = "master" Тогда
		ПутьККэшуБиблиотек = ОбъединитьПути(КаталогПубликации, "libData.json");
	Иначе
		ПутьККэшуБиблиотек = ОбъединитьПути(КаталогПубликации, "_" + ИмяВетки, "libData.json");
	КонецЕсли;

	Если НЕ ФС.ФайлСуществует(ПутьККэшуБиблиотек) Тогда

		ФайлКэш = Новый Файл(ПутьККэшуБиблиотек);
		КаталогКэш = Новый Файл(ФайлКэш.Путь);
		Если Не КаталогКэш.Существует() Тогда
			СоздатьКаталог(КаталогКэш.ПолноеИмя);
		КонецЕсли;

		ЗаписьТекста = Новый ЗаписьТекста;
		ЗаписьТекста.Открыть(ПутьККэшуБиблиотек, КодировкаТекста.UTF8NoBOM);
		ЗаписьТекста.Записать("{}");
		ЗаписьТекста.Закрыть();

	КонецЕсли;

	ЧтениеТекста = Новый ЧтениеТекста;
	ЧтениеТекста.Открыть(ПутьККэшуБиблиотек, КодировкаТекста.UTF8NoBOM);
	ТекстКэшБиблиотек = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	КэшБиблиотек = ПарсерJSON.ПрочитатьJSON(ТекстКэшБиблиотек);
	КэшБиблиотек.Вставить("_ПутьККэшуБиблиотек", ПутьККэшуБиблиотек);
	Возврат КэшБиблиотек;

КонецФункции

Процедура ЗаписатьКэшБиблиотек(Знач КэшБиблиотек)

	ПутьККэшуБиблиотек = КэшБиблиотек.Получить("_ПутьККэшуБиблиотек");
	КэшБиблиотек.Удалить("_ПутьККэшуБиблиотек");

	ТекстКэшБиблиотек = ПарсерJSON.ЗаписатьJSON(КэшБиблиотек);
	ЗаписьТекста = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(ПутьККэшуБиблиотек, КодировкаТекста.UTF8NoBOM);
	ЗаписьТекста.Записать(ТекстКэшБиблиотек);
	ЗаписьТекста.Закрыть();

КонецПроцедуры


ПарсерJSON = Новый ПарсерJSON();

Си = Новый СистемнаяИнформация;
ЭтоВин = Найти(СИ.ВерсияОС, "Windows") > 0;

// Признак, что не надо отправлять изменения в oscript-library
ТолькоЛокальнаяСборка = НайтиВИндексированнойКоллекции(АргументыКоманднойСтроки, "--local-build-only") <> Неопределено
	Или (Си.ПолучитьПеременнуюСреды("OPM_LOCAL_BUILDS_ONLY") = "1");

КаталогСборки = ОбъединитьПути(ТекущийКаталог(), "build");
КаталогИсходников = ОбъединитьПути(КаталогСборки, "src");
КаталогСобранныхПакетов = ОбъединитьПути(КаталогСборки, "out");

ФС.ОбеспечитьПустойКаталог(КаталогСборки);
ФС.ОбеспечитьКаталог(КаталогИсходников);
ФС.ОбеспечитьПустойКаталог(КаталогСобранныхПакетов);

Лог = Логирование.ПолучитьЛог("libUpdate");
Лог.ДобавитьСпособВывода(Новый ВыводЛогаВКонсоль());

ФайлЖурнала = Новый ВыводЛогаВФайл();
ФайлЖурнала.ОткрытьФайл(ОбъединитьПути(КаталогСборки, "build-library.log"));
Лог.ДобавитьСпособВывода(ФайлЖурнала);

Лог.Информация("");
Лог.Информация("Сборка запущена %1", ТекущаяДата());

ТокенАвторизацииГиттер = Си.ПолучитьПеременнуюСреды("GITTER_OAUTH_TOKEN");
Мессенджер = Неопределено;
МассивСообщенийГиттер = Новый Массив;

Если ЗначениеЗаполнено(ТокенАвторизацииГиттер) Тогда
	ИмяКомнаты = "EvilBeaver/oscript-library";  
	Мессенджер = Новый Мессенджер();
	Мессенджер.ИнициализацияGitter(ТокенАвторизацииГиттер);
КонецЕсли;

КаталогПубликации = Си.ПолучитьПеременнуюСреды("PATH_TO_OSCRIPT_HUB");
Если НЕ ЗначениеЗаполнено(КаталогПубликации) Тогда
	КаталогПубликации = "/var/www/hub.oscript.io/download";
КонецЕсли;

КэшБиблиотек = ПолучитьКэшДля("master");
КэшБиблиотекВРазработке = ПолучитьКэшДля("develop");

ДанныеОтвета = Новый Массив;
ДополнитьМассив(ДанныеОтвета, ПолучитьМассивРепозиториев("sources"));
ДополнитьМассив(ДанныеОтвета, ПолучитьМассивРепозиториев("forks"));

Для Каждого Репозиторий Из ДанныеОтвета Цикл

	ВывестиЛинию();
	ОбработатьРепозиторий(Репозиторий, КэшБиблиотек, "master");
	ОбработатьРепозиторий(Репозиторий, КэшБиблиотекВРазработке, "develop");

КонецЦикла;

ВывестиЛинию();
Лог.Информация("Сборка пакетов завершена");

ВывестиЛинию();
Лог.Информация("Публикую библиотеки в хаб");
ФС.КопироватьСодержимоеКаталога(КаталогСобранныхПакетов, КаталогПубликации);
Лог.Информация("Пакеты опубликованы");

ЗаписатьКэшБиблиотек(КэшБиблиотек);
ЗаписатьКэшБиблиотек(КэшБиблиотекВРазработке);

Лог.Информация("База пакетов обновлена");

СформироватьList(КаталогПубликации);
Лог.Информация("Обновлен list.txt");

Если Не ТолькоЛокальнаяСборка Тогда

	Лог.Информация("Уведомляю Gitter о выходе новых версий");
	Для Каждого СообщениеГиттер Из МассивСообщенийГиттер Цикл
		Мессенджер.ОтправитьСообщение(Мессенджер.ДоступныеПротоколы().gitter, ИмяКомнаты, СообщениеГиттер);
	КонецЦикла;

КонецЕсли;
