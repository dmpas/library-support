///////////////////////////////////////////////////////////////////
//
// Сборщик пакетов из библиотеки
//
// Что делает:
//  В безусловном порядке получает актуальную версию из облака в ветке master
//  и создает из полученных исходников .ospx в заданном выходном каталоге.
//
// Что НЕ делает:
//  Не взаимодействует с хабом, не знает про его содержимое, отозванные версии и прочее.
//  Тупо собирает актуальные ospx через opm build и кладет в некий каталог.
//
///////////////////////////////////////////////////////////////////

#Использовать cmdline
#Использовать "librarian"
#Использовать fs
#Использовать tempfiles
#Использовать logos

Перем мРабочийКаталог;
Перем Лог;
Перем ТолькоЛокальнаяСборка;
Перем КаталогСобранныхПакетов;

Функция ПолучитьПарсер()
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки;
	Парсер.ДобавитьИменованныйПараметр("-d", "Рабочий каталог для сборки");
	Парсер.ДобавитьПараметр("ВыходнойКаталог", "Каталог для собранных ospx");
	Парсер.ДобавитьПараметрКоллекция("БиблиотекиДляСборки", "Имена библиотек для сборки");
	Парсер.ДобавитьПараметрФлаг("-local-only", "Собирать локально (не отправлять в организацию)");

	Возврат Парсер;

КонецФункции

Процедура ВыполнитьСборку()
	
	Парсер = ПолучитьПарсер();
	Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);
	Если Параметры = Неопределено Тогда
		Парсер.ВывестиСправкуПоПараметрам();
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Параметры["ВыходнойКаталог"]) Тогда
		ВызватьИсключение "Не указан выходной каталог";
	КонецЕсли;

	ФС.ОбеспечитьКаталог(Параметры["ВыходнойКаталог"]);
	КаталогСобранныхПакетов = Параметры["ВыходнойКаталог"];

	Если ЗначениеЗаполнено(Параметры["-d"]) Тогда
		мРабочийКаталог = Параметры["-d"];
		ФС.ОбеспечитьКаталог(мРабочийКаталог);
	Иначе
		мРабочийКаталог = ВременныеФайлы.СоздатьКаталог();
	КонецЕсли;

	ТолькоЛокальнаяСборка = Параметры["-local-only"];

	Если Не ЗначениеЗаполнено(Параметры["БиблиотекиДляСборки"]) Тогда
		ВызватьИсключение "Не задан список библиотек для сборки. Укажите '*' для всех";
	КонецЕсли;

	ИменаБиблиотек = Параметры["БиблиотекиДляСборки"];

	Если ИменаБиблиотек[0] = "*" Тогда
		ЗапуститьСборкуПоВсем();
	Иначе
		ЗапуститьСборку(Параметры["БиблиотекиДляСборки"]);
	КонецЕсли;

КонецПроцедуры

Процедура ЗапуститьСборку(Знач ИменаБиблиотек)
	
	МенеджерБиблиотек = Новый МенеджерБиблиотекиПакетов;
	МенеджерБиблиотек.УстановитьСоединение();
	Список = МенеджерБиблиотек.ПолучитьСписокРепозиториев();
	МенеджерБиблиотек.ЗакрытьСоединение();
	Для Каждого ТребуемаяБиблиотека Из ИменаБиблиотек Цикл
		Лог.Информация("Работаю по библиотеке " + ТребуемаяБиблиотека);
		СтрОписание = Список.Найти(ТребуемаяБиблиотека, "Имя");
		Если СтрОписание = Неопределено Тогда
			Лог.Ошибка("Библиотека с именем " + ТребуемаяБиблиотека + " отсутствует в организации");
			Продолжить;
		КонецЕсли;

		ОбработатьБиблиотеку(СтрОписание.РепоБиблиотеки);

	КонецЦикла;

КонецПроцедуры

Процедура ЗапуститьСборкуПоВсем()
	ВызватьИсключение "Не реализовано";
КонецПроцедуры

Процедура ОбработатьБиблиотеку(Знач Описание)

	КаталогПакета = ОбъединитьПути(КаталогСобранныхПакетов, Описание.ИмяРепозитория);
	КаталогРепо = ОбъединитьПути(мРабочийКаталог, Описание.ИмяРепозитория);
	ФС.ОбеспечитьКаталог(КаталогРепо);
	ФС.ОбеспечитьКаталог(КаталогПакета);

	ГитРепо = Новый РепоБиблиотеки;
	ГитРепо.НастроитьПоОписанию(Описание);
	ГитРепо.УстановитьКаталогРабочейКопии(КаталогРепо);

	ГитРепо.ПолучитьАктуальныйКод("master");

	ГитРепо.СобратьПакет(КаталогПакета);

	// TODO: opm build и остальное из updateOscriptLibrary.os

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////

Лог = Логирование.ПолучитьЛог("oscript.infrastructure");

Попытка
	ВыполнитьСборку();
Исключение
	// add cleanup here
	ВременныеФайлы.Удалить();
	ВызватьИсключение;
КонецПопытки;
